<?php

class currencies extends generic_object {

    public $arrForm = array();

    public function __construct($uid = 0) {
        parent::__construct($uid, __CLASS__);
    }

    public function CurrencySelectBox($inputName, $selctedValue = NULL, $ID = NULL)
    {
        $sql = "SELECT uid, name FROM currencies ORDER BY name";
        $result = database::query($sql);
        $data = array();
        $data[0] = 'Currency';
        if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
            while($row=mysql_fetch_assoc($result)) {
                $data[$row['uid']] = $row['name'];
            }
        }
        return format::to_select(array("name" => $inputName,"id" => $ID,"style" => "width:180px;","options_only" => false), $data , $selctedValue);
    }

    public function getList( $data = array(), $OrderBy = "name ", $all = false )
    {
            $parts = config::get('paths');
            $where = ' where 1 = 1';
            foreach($data as $idx => $val ){
                $where .= " AND " .  $idx . "='" . $val . "'";
            }
           if($all == false) {
            $result = database::query('SELECT COUNT(uid) FROM currencies '.$where);
            $max = 0;
            if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
                $row = mysql_fetch_array($result);
                $max = $row[0];
            }
            $pageId = '';
            if($pageId=='') {                
                $n = count($parts) - 1;
                
                if(isset($parts[$n]) && is_numeric($parts[$n]) && $parts[$n] > 0) {
                    $pageId = $parts[$n];
                } else {
                    $pageId = 1;
                }
            }

            $this->pager(
                    $max,						//see above
                    config::get("pagesize"),	//how many records to display at one time
                    $pageId,
                    array("php_self" => "")
            );
            
            $this->set_range(10);
            $result = database::query("SELECT * FROM currencies ".$where." ORDER BY " . $OrderBy . "  LIMIT ".$this->get_limit());

        }
        else {
            $result = database::query("SELECT * FROM currencies ".$where." ORDER BY " . $OrderBy );
        }
        $this->data		= array();
        if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
            while($row=mysql_fetch_assoc($result)) {
                $this->data[] = $row;
            }
        }
        return $this->data;
    }

    public function doSave ()
    {
        $response = true;
        $response = $this->isValidate();
        if( count( $response ) == 0 ){
            
            if( $_POST['uid'] > 0)
                $this->save ();
            else{
                $insert = $this->insert();
                $this->arrForm['uid'] = $insert;                
            }
        }
        else{
            $msg  = NULL;
            foreach( $response as $idx => $val ){
                $this->arrForm[$idx] = 'label_error';
                $msg .= '<li>'.$val.'</li>';
            }
            if($msg != NULL)
                $this->arrForm['message_error'] = '<p>Please correct the errors below:</p><ul>'.$msg.'</ul>';
        }        
        if( count( $response ) > 0 )
            return false;
        else
            return true;
    }
    public function isValidate()
    {

        if(is_numeric($_POST['uid']) && $_POST['uid'] > 0) {
            parent::__construct($_POST['uid'],__CLASS__);
            $this->load();
        }
        $message            =   array();
         if( trim($_POST['name']) == '' ) {
            $message['error_name']      =   "Please provide currency name.";
        }
        if( trim($_POST['symbol']) == '' ) {
            $message['error_symbol']      =   "Please provide currency symbol.";
        }
        
        foreach( $_POST as $idx => $val )   {
            $this->arrForm[$idx] = $val;
            if( in_array($idx,array('uid', 'form_submit_button')) ) continue;
            $this->arrFields[$idx]['Value'] = $val;
        }
        return $message;
    }

   
   


    public function getPriceAndCurrency( $PriceFor )
    {
        
        $priceArray = array();

        $locale = config::get('locale');
        $languageObject = new language();
        $where = array( 'prefix' => $locale );
        $languageObject->load(array(), $where);
       
        $uid = 0;
        $uid = $languageObject->TableData['currency_uid']['Value'];
        if(is_numeric($uid) && $uid > 0) {
            parent::__construct($uid,__CLASS__);
            $this->load();

            $priceArray['name'] = $this->TableData['name']['Value'];        

            if( $PriceFor == 'homeuser' )
                $priceArray['price'] = $languageObject->TableData['home_user_price']['Value'];
            if( $PriceFor == 'school' )
                $priceArray['price'] = $languageObject->TableData['school_price']['Value'];

            $priceArray['price_format'] = '';

            if($this->TableData['position']['Value'] == 'before')
                    $priceArray['price_format'] =  $this->TableData['symbol']['Value'];


            $priceArray['price_format'] .= $priceArray['price'];


            if($this->TableData['position']['Value'] == 'after')
                    $priceArray['price_format'] .=  $this->TableData['symbol']['Value'];
            
            
        }
        return $priceArray;
    }

    public function getCurrencyFormat( $locale, $price )
    {
        $price_format = '';
        $languageObject = new language();
        $where = array( 'prefix' => $locale );
        $languageObject->load(array(), $where);

        $uid = 0;
        $uid = $languageObject->TableData['currency_uid']['Value'];
        if(is_numeric($uid) && $uid > 0) {
            parent::__construct($uid,__CLASS__);
            $this->load();

            

            

            if($this->TableData['position']['Value'] == 'before')
                    $price_format =  $this->TableData['symbol']['Value'];


            $price_format .= $price;


            if($this->TableData['position']['Value'] == 'after')
                    $price_format .=  $this->TableData['symbol']['Value'];


        }

        return $price_format;
    }

}
?>