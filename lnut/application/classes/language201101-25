<?php

class language extends generic_object {

	public $arrForm = array();

	public function __construct($uid = 0) {
		parent::__construct($uid, __CLASS__);
	}

	public function exists($language_uid=null) {
		$sql = "SELECT `uid` FROM `language` WHERE `uid`='".$language_uid."' LIMIT 1";
		$res = database::query($sql);

		if($res && mysql_error()=='' && mysql_num_rows($res) > 0) {
			return true;
		} else {
			return false;
		}
	}

	public function LanguageSelectBox($inputName, $selctedValue = NULL) {

		$sql = "SELECT ";
		$sql.= "`uid`, ";
		$sql.= "`name` ";
		$sql.= "FROM ";
		$sql.= "`language` ";
		$sql.= "ORDER BY ";
		$sql.= "`name` ASC";

		$res = database::query($sql);

		$data = array();
		$data[0] = 'Language';

		if($res && mysql_error()=='' && mysql_num_rows($res) > 0) {
			while($row=mysql_fetch_assoc($res)) {
				$data[$row['uid']] = $row['name'];
			}
		}
		return format::to_select(
			array(
				"name"			=> $inputName,
				"id"			=> $inputName,
				"style"			=> "width:180px;",
				"options_only"	=> false
			),
			$data,
			$selctedValue
		);
	}

	public function LocaleSelectBox($inputName, $selctedValue = NULL) {

		$sql = "SELECT ";
		$sql.= "`prefix` ";
		$sql.= "FROM ";
		$sql.= "`language` ";
		$sql.= "ORDER BY ";
		$sql.= "`prefix` ASC";

		$res = database::query($sql);

		$data = array();
		$data[''] = 'Locale';

		if($res && mysql_error()=='' && mysql_num_rows($res) > 0) {
			while($row=mysql_fetch_assoc($res)) {
				$data[$row['prefix']] = $row['prefix'];
			}
		}
		return format::to_select(
			array(
				"name"			=> $inputName,
				"id"			=> $inputName,
				"options_only"	=> false
			),
			$data,
			$selctedValue
		);
	}

	public function getList( $data = array(), $OrderBy = "name ", $all = false ) {
		$parts = config::get('paths');
		$where = ' where 1 = 1';

		foreach($data as $idx => $val ){
			$where .= " AND " .  $idx . "='" . $val . "'";
		}
		if($all == false) {
			$result = database::query('SELECT COUNT(`uid`) FROM `language` '.$where);
			$max = 0;

			if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
				$row = mysql_fetch_array($result);
				$max = $row[0];
			}
			$pageId = '';
			if($pageId=='') {
				$n = count($parts) - 1;
			
				if(isset($parts[$n]) && is_numeric($parts[$n]) && $parts[$n] > 0) {
					$pageId = $parts[$n];
				} else {
					$pageId = 1;
				}
			}

			$this->pager(
				$max,						//see above
				config::get("pagesize"),	//how many records to display at one time
				$pageId,
				array("php_self" => "")
			);
			
			$this->set_range(10);
			$result = database::query("SELECT * FROM `language` ".$where." ORDER BY " . $OrderBy . "  LIMIT ".$this->get_limit());

		} else {
			$result = database::query("SELECT * FROM `language` ".$where." ORDER BY " . $OrderBy );
		}
		$this->data		= array();
		if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
			while($row=mysql_fetch_assoc($result)) {
				$this->data[] = $row;
			}
		}
		return $this->data;
	}

	public function doSave () {
		$response = true;
		$response = $this->isValidate();

		if( count( $response ) == 0 ) {
			if( $_POST['uid'] > 0) {
				$this->save ();
			} else {
				$insert = $this->insert();
				$this->arrForm['uid'] = $insert;
			}
		} else {
			$msg  = NULL;
			foreach( $response as $idx => $val ) {
				$this->arrForm[$idx] = 'label_error';
				$msg .= '<li>'.$val.'</li>';
			}
			if($msg != NULL) {
				$this->arrForm['message_error'] = '<p>Please correct the errors below:</p><ul>'.$msg.'</ul>';
			}
		}
		if( count( $response ) > 0 ) {
			return false;
		} else {
			return true;
		}
	}

	public function isValidate() {
		if(is_numeric($_POST['uid']) && $_POST['uid'] > 0) {
			parent::__construct($_POST['uid'],__CLASS__);
			$this->load();
		}
		$message = array();
		if( trim($_POST['name']) == '' ) {
			$message['error_name'] = "Please provide language name.";
		}
		if( trim($_POST['prefix']) == '' ) {
			$message['error_prefix'] = "Please provide language prefix.";
		}

		foreach( $_POST as $idx => $val )   {
			$this->arrForm[$idx] = $val;
			if( in_array($idx,array('uid', 'form_submit_button')) ) continue;
			$this->arrFields[$idx]['Value'] = $val;
		}
		return $message;
	}
	
	public function doSaveImages () {
		$response = true;
		$response = $this->isValidImages();

		if( count( $response ) == 0 ) {
			if( $_POST['uid'] > 0) {
				$this->save ();
			} else {
				$insert = $this->insert();
				$this->arrForm['uid'] = $insert;
			}
		} else {
			$msg  = NULL;
			foreach( $response as $idx => $val ) {
				$this->arrForm[$idx] = 'label_error';
				$msg .= '<li>'.$val.'</li>';
			}
			if($msg != NULL) {
				$this->arrForm['message_error'] = '<p>Please correct the errors below:</p><ul>'.$msg.'</ul>';
			}
		}
		if( count( $response ) > 0 ) {
			return false;
		} else {
			return true;
		}
	}
	
	public function isValidImages() {
		$ImgPath = config::get('site').'/images/certificate/';
		if(is_numeric($_POST['uid']) && $_POST['uid'] > 0) {
			parent::__construct($_POST['uid'],__CLASS__);
			$this->load();
		}
		$message = array();

		if( isset($_FILES['logo_url']) && trim($_FILES['logo_url']['name']) == '' && trim($_POST['logo_url_hidden']) == '' ) {
			$message['error_logo_url'] = "Please upload logo image.";
		}
		if( isset($_FILES['gold_bg']) && trim($_FILES['gold_bg']['name']) == '' && trim($_POST['gold_bg_hidden']) == '' ) {
			$message['error_gold_bg'] = "Please upload gold background image.";
		}
		if( isset($_FILES['silver_bg']) && trim($_FILES['silver_bg']['name']) == '' && trim($_POST['silver_bg_hidden']) == '' ) {
			$message['error_silver_bg'] = "Please upload silver background image.";
		}
		if( isset($_FILES['bronze_bg']) && trim($_FILES['bronze_bg']['name']) == '' && trim($_POST['bronze_bg_hidden']) == '' ) {
			$message['error_bronze_bg'] = "Please upload bronze background image.";
		}
		
			$allow_types = array(
				'image/jpeg',
				'image/png',
				'image/gif',
				'image/pjpeg'
			);
			
			if( trim($_FILES['bronze_bg']['name']) != '' ) { 
				$image = '';
				$image_name  = '';
				if( in_array( $_FILES['bronze_bg']['type'],  $allow_types) == false ) {					
					$message['error_bronze_bg'] = "Please upload valid bronze background image.";
				} else { 
					$image_name = '';
					$image_name = explode('.',$_FILES['bronze_bg']['name']);
					$image = 'bronze_bg_'.time().'.'.$image_name[count($image_name)-1];
					@move_uploaded_file( $_FILES['bronze_bg']['tmp_name'], $ImgPath.$image);				
					if(!empty($_POST['bronze_bg_hidden']) && @$_POST['bronze_bg_hidden'] != 'bg_BRONZE.png' )
						@unlink( $ImgPath.$_POST['bronze_bg_hidden']);
					$this->arrFields['bronze_bg']['Value'] = $image;	
				}
			}
			
			if( trim($_FILES['silver_bg']['name']) != '' ) { 
				$image = '';
				$image_name  = '';
				if( in_array( $_FILES['silver_bg']['type'],  $allow_types) == false ) {					
					$message['error_silver_bg'] = "Please upload valid silver background image.";
				} else { 
					$image_name = '';
					$image_name = explode('.',$_FILES['silver_bg']['name']);
					$image = 'silver_bg_'.time().'.'.$image_name[count($image_name)-1];
					@move_uploaded_file( $_FILES['silver_bg']['tmp_name'], $ImgPath.$image);				
					if(!empty($_POST['silver_bg_hidden']) && @$_POST['silver_bg_hidden'] != 'bg_SILVER.png' )
						@unlink( $ImgPath.$_POST['silver_bg_hidden']);
					$this->arrFields['silver_bg']['Value'] = $image;	
				}
			}
			
			if( trim($_FILES['gold_bg']['name']) != '' ) { 
				$image = '';
				$image_name  = '';
				if( in_array( $_FILES['gold_bg']['type'],  $allow_types) == false ) {					
					$message['error_gold_bg'] = "Please upload valid gold background image.";
				} else { 
					$image_name = '';
					$image_name = explode('.',$_FILES['gold_bg']['name']);
					$image = 'gold_bg_'.time().'.'.$image_name[count($image_name)-1];
					@move_uploaded_file( $_FILES['gold_bg']['tmp_name'], $ImgPath.$image);				
					if(!empty($_POST['gold_bg_hidden']) && @$_POST['gold_bg_hidden'] != 'bg_GOLD.png')
						@unlink( $ImgPath.$_POST['gold_bg_hidden']);
					$this->arrFields['gold_bg']['Value'] = $image;	
				}
			}
			
			if( trim($_FILES['logo_url']['name']) != '' ) { 
				$image = '';
				$image_name  = '';
				if( in_array( $_FILES['logo_url']['type'],  $allow_types) == false ) {					
					$message['error_logo_url'] = "Please upload valid logo image.";
				} else { 
					$image_name = '';
					$image_name = explode('.',$_FILES['logo_url']['name']);
					$image = 'logo_'.time().'.'.$image_name[count($image_name)-1];
					@move_uploaded_file( $_FILES['logo_url']['tmp_name'],  $ImgPath.$image);				
					if(!empty($_POST['logo_url_hidden']) && @$_POST['logo_url_hidden'] != 'URLcom.png')
						@unlink(  $ImgPath.$_POST['logo_url_hidden'] );
					$this->arrFields['logo_url']['Value'] = $image;	
				}
			}		
		
		//$this->arrFields[$idx]['Value'] = $val;
		
		
		
		return $message;
	}

	public function getLanguageArray() {

		$arrResponse = array ();

		$query = "SELECT ";
		$query.= "`uid`, ";
		$query.= "`name`, ";
		$query.= "`prefix`, ";
		$query.= "`directory`, ";
		$query.= "`active`, ";
		$query.= "`available`, ";
		$query.= "`is_learnable`, ";
		$query.= "`is_support`, ";
		$query.= "`position`, ";
		$query.= "`currency_uid`, ";
		$query.= "`home_user_price`, ";
		$query.= "`school_price` ";
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "ORDER BY ";
		$query.= "`name` ASC";

		$result = database::query($query);

		if($result) {
			if(mysql_num_rows($result) > 0) {
				while($row = mysql_fetch_assoc($result)) {
					$arrResponse[$row['uid']] = stripslashes($row['name']);
				}
			}
		}
		return $arrResponse;
	}

	public function getLanguagesList( $support_language_uid = 14) {

		$arrResponse = array ();
/*
SELECT `uid`, `name`, `directory`, `available`, (SELECT `name` FROM `language_translation` WHERE `language_uid` = `language`.`uid` and `language_translation_id` = 14) as `Lname` FROM `language` ORDER BY `name` ASC


*/
		$query = "SELECT ";
		$query.= "`uid`, ";
		$query.= "`name`, ";
		$query.= "`directory`, ";
		$query.= "`available`, ";
		$query.= "( ";
			$query.= "SELECT ";
			$query.= "`name` ";
			$query.= "FROM ";
			$query.= "`language_translation` ";
			$query.= "WHERE ";
			$query.= "`language_uid` = `language`.`uid` ";
			$query.= "AND ";
			$query.= "`language_translation_id` = '".$support_language_uid."' ";			
		$query.= ") ";
		$query.= "as `Lname`";		
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "ORDER BY ";
		$query.= "`name` ASC";
		$result		= database::query($query);

		if($result && mysql_error()=='' && mysql_num_rows($result)) {
			while($row = mysql_fetch_assoc($result)) {
				if(!empty($row['Lname']) && $row['Lname'] != NULL) 
					$row['name'] = $row['Lname'];
				$arrResponse[$row['uid']] = array (
					'name'		=> stripslashes($row['name']),
					'directory'	=> stripslashes($row['directory']),
					'available'	=> $row['available']
				);
			}
		}

		return $arrResponse;
	}

	public function getLanguages() {
		$languages	= array ();

		$query = "SELECT ";
		$query.= "`uid`, ";
		$query.= "`name`, ";
		$query.= "`prefix`, ";
		$query.= "`directory`, ";
		$query.= "`active`, ";
		$query.= "`available`, ";
		$query.= "`is_learnable`, ";
		$query.= "`is_support`, ";
		$query.= "`position`, ";
		$query.= "`currency_uid`, ";
		$query.= "`home_user_price`, ";
		$query.= "`school_price` ";
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "ORDER BY ";
		$query.= "`name` ASC";

		$result		= database::query($query);

		if($result && mysql_error()=='' && mysql_num_rows($result)) {
			while($row = mysql_fetch_assoc($result)) {
				$languages[$row['uid']] = $row;
			}
		}

		return $languages;
	}

	public function getPrefix( $language_id='' ) {
		$locale = 'en';

		$query = "SELECT ";
		$query.= "`prefix` ";
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "WHERE ";
		$query.= "`uid`='".mysql_real_escape_string($language_id)."' ";
		$query.= "LIMIT 1";

		$result = database::query($query);

		if($result) {
			if(mysql_num_rows($result) > 0) {
				$row = mysql_fetch_assoc($result);
				$locale = $row['prefix'];
			}
		}

		return $locale;
	}

	public function CheckLocale( $locale ){

		$query = "SELECT ";
		$query.= "`uid` ";
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "WHERE ";
		$query.= "`prefix`='".mysql_real_escape_string( $locale )."' AND ";
		$query.= "`available`='1'";
		$query.= "LIMIT 1";

		$result = database::query($query);

		if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
			$row = mysql_fetch_array($result);
			return $row['uid'];
		}

		return false;
	}

	public function doSavePricing(){
		$response = true;
		$response = $this->isValidatePricing();

		if( count( $response ) == 0 ){
			$this->save();
		} else {
			$msg = null;
			foreach( $response as $idx => $val ){
				$this->arrForm[$idx] = 'label_error';
				$msg .= '<li>'.$val.'</li>';
			}
			if($msg != null) {
				$this->arrForm['message_error'] = '<p>Please correct the errors below:</p><ul>'.$msg.'</ul>';
			}
		}
		if( count( $response ) > 0 ) {
			return false;
		} else {
			return true;
		}
	}

	public function isValidatePricing() {

		if(is_numeric($_POST['uid']) && $_POST['uid'] > 0) {
			parent::__construct($_POST['uid'],__CLASS__);
			$this->load();
		}
		$message = array();
		if( trim($_POST['currency_uid']) == '0' ) {
			$message['error.currency_uid'] = "Please choose currency.";
		}
		if( !is_numeric($_POST['home_user_price']) || $_POST['home_user_price'] == 0 ) {
			$message['error.home_user_price'] = "Please enter price for home user.";
		}

		if( !is_numeric($_POST['school_price']) || $_POST['school_price'] == 0 ) {
			$message['error.school_price'] = "Please enter price for school.";
		}

		if( !is_numeric($_POST['vat']) || $_POST['vat'] == 0 ) {
			$message['error.vat'] = "Please enter valid VAT %.";
		}

		$IgnoreArray = array('uid', 'locale','table_name','form_submit_button');
		foreach( $_POST as $idx => $val )   {
			$this->arrForm[$idx] = $val;
			if( in_array($idx, $IgnoreArray ) ) continue;
			$this->arrFields[$idx]['Value'] = $val;
		}
		return $message;
	}

	public static function getPrefixes () {

		$response = array();

		$query = "SELECT ";
		$query.= "`uid`, ";
		$query.= "`name`, ";
		$query.= "`prefix` ";
		$query.= "FROM ";
		$query.= "`language` ";
		$query.= "ORDER BY ";
		$query.= "`prefix` ASC";

		$result = database::query($query);

		if($result && mysql_error()=='' && mysql_num_rows($result) > 0) {
			while($row = mysql_fetch_assoc($result)) {
				$response[$row['uid']] = array (
					'name'	=> stripslashes($row['name']),
					'prefix'=> stripslashes($row['prefix'])
				);
			}
		}

		return $response;
	}
}
?>